Cheatcodes for PorteuX
=======================================

Boot parameters (also known as cheatcodes) are used to affect the
booting process of PorteuX. The cheatcodes listed here are only those
that are specific to PorteuX (see the final note for information on
cheatcodes that apply to all linux distributions, including PorteuX).
You can use these parameters to disable desired kinds of hardware
detection, start PorteuX from a specific location, load additional
modules, etc.

Reboot your computer and wait several seconds until the graphical
PorteuX logo appears with a boot menu. Choose your desired menu
entry and hit Tab, which will allow you to edit the command line.
Add your desired boot argument from the list below to affect booting
the way you like.
Here's an example of what the boot line would look like, adding the
noauto and copy2ram cheatcodes to a standard PorteuX boot option
(which already has some other cheatcodes by default):

APPEND changes=EXIT:/porteux noauto copy2ram

These cheatcodes can also be added to the APPEND line of your
/boot/syslinux/porteux.cfg entries (or other bootloader config files)
to apply them automatically on every boot.

---------------------------------------

List of available cheatcodes in alphabetical order:
NOTE: Example cheatcodes are sometimes listed below inside single
quotes (e.g. 'example=somevalue') for clarity in the documentation.
When you enter these cheatcodes during boot time or in your
porteux.cfg, you should not use these quote marks.

base_only

   ... This cheatcode will prevent the system from loading any
       modules at startup other than the 'base' modules included
       with the default ISO (000-kernel.xzm, 001-core.xzm, etc).
       This is useful in debugging to see if problems you are
       having are associated with some module you've added to the
       system.

changes=/dev/device
changes=/path/
changes=/path/file.dat

   ... With this boot parameter, you tell PorteuX to use a device
       (or a file or directory) other than your memory for storing
       changes. You can, for example, format your disk partition
       /dev/sdb2 with some Linux filesystem (eg. ext4) and then use
       'changes=/dev/sdb2' to store all changes to that partition.
       This way you won't lose your changes after reboot.
   ... If you use a file image instead of a device, and the image
       contains a valid filesystem, PorteuX will mount it on a loop
       device and will store changes to it.
   ... If you use a directory, PorteuX will save changes to it (it
       will make a 'changes' subdirectory there). This should only
       be used for linux filesystems, if changes need to be saved to
       a FAT or NTFS partition, a savefile container has to be used.
   ... It's not recommended to use this option if the path points to
       a slow device, such as a USB stick. In this case, use this
       cheatcode in conjuction with 'EXIT:', as described below.

changes=EXIT:/dev/device
changes=EXIT:/path/
changes=EXIT:/path/file.dat

   ... Same as above, but all changes made in PorteuX are kept in
       memory until you reboot/shutdown. Your RAM works as a buffer,
       which gets dumped into the specified path only when the
       session is finished.
   ... It works as fast as 'Always Fresh' mode as all modifications
       to files and folders are performed in RAM.
   ... It reduces the number of read/write cycles, which should
       extend the lifespan of the storage device.
   ... The only disadvantage is that the session is not saved in
       cases where you experience a freeze or power interrupt.
       
       NOTE: this is the default option.
       NOTE: while you are running a session with changes=EXIT:, you
       can use the '/opt/porteux-scripts/dump-session' command to move
       all of your changes from RAM to your storage media, reducing
       the risk of data loss and freeing up your RAM.

changes-ro

   ... Keep saved changes in a read-only state. This is useful when
       you have your system set up exactly how you like it and do not
       want to save any other changes you might make during a live
       session. This cheatcode should be used in conjunction with the
       'changes=' or 'changes=EXIT:' cheatcodes.
       
       NOTE: remove the 'changes-ro' cheatcode from the bootloader config
       to start saving changes as normal (effective after a reboot).
       
       Example:
       changes=/path/file.dat changes-ro

cliexec=my_script
cliexec=my_script;reboot

   ... Execute specified command(s) in runlevel 3 (before logging
       in to a graphical interface).
       Use semicolons (;) as command separators with no spaces.
   ... If you need to use spaces in the command line, replace them
       with '~'. For example, 'cliexec=echo~Shutting~power;poweroff'
       will echo your text with spaces instead of '~'.
       
       NOTE: to start graphical applications please use 'guiexec='
       cheatcode instead.

copy2ram

   ... Copy all modules to RAM. You'll need at least 1.5 GB of RAM
       to boot PorteuX properly. Copy2ram slows down the boot phase
       a bit but speeds up PorteuX experience.

       NOTE: You can use 'rammod' cheatcode to selectively load modules
       to RAM - see the 'rammod' description below.

delay=some_value

   ... To be used for devices which need extra time to settle up.
       Example: 'delay=5' will cause a 5 second delay before PorteuX
       starts the boot process.

extramod=/path/folder_with_modules
extramod=/path/folder_with_modules;/path2/folder_with_modules

   ... This cheatcode lets you load modules from one or more external
       folders that are located outside of the /porteux directory.
       Multiple folders can be specified, with full paths separated by
       a semicolon without any spaces.
       
       Examples:
       extramod=/mnt/sdb3/porteux-modules
       extramod=/mnt/sdb3/porteux-modules;/mnt/sdc4/inkscape_modules

from=/mnt/partition
from=/path/folder
from=/path/porteux.iso

   ... Loads PorteuX from the specified partition, folder or ISO file.
       Examples:
       'from=/mnt/sdb2' will attempt to load unpacked PorteuX ISO from
       the second partition on your second drive.
       'from=/mnt/sda2/linux-testing' will attempt to load unpacked ISO
       from the 'linux-testing' folder placed on the second partition.
       'from=/mnt/sda1/porteux-test.iso' will attempt to load the PorteuX
       data from 'porteux-test.iso'.
       
       NOTE: if the destination partition is not provided with this
       cheatcode, the booting script will search through all available
       devices for your data.

fsck

   ... Enables a filesystem check for ext(2,3,4), FAT and NTFS
       partitions during boot time before anything is mounted.
       XFS does not need fsck as a check is performed automatically
       when it's mounted. A log file will be shown after boot.
       
       NOTE: on some systems, you will need to use the 'delay='
       cheatcode in order to allow your devices to settle up.

fscknolog

   ... Same as above but the log file won't be shown after boot.

guiexec=my_script
guiexec=firefox;pidgin

   ... Execute specified command(s) in runlevel 4, when the graphical
       interface is loaded; unlike 'cliexec' this cheatcode can be
       used to start graphical applications.
       Use semicolons (;) as command separators with no spaces.
   ... If you need to use spaces in the command line, replace them
       with '~'.
       Example: 'guiexec=firefox~kernel.org' will open the firefox
       browser on the 'kernel.org' website.

kmap=keyboardmap
kmap=keyboardmap1,keyboardmap2,keyboardmap3
kmap=keyboardmap:variant

   ... Specifies the preferred keyboard layout for Xorg sessions of any
       desktop environment. A full list of supported layouts can be found
       in the /etc/X11/xkb/symbols folder. Up to 3 layouts are supported.
       Example: 'kmap=ara,us' will set the Arabic keyboard layout at
       startup. 'kmap=ara,us' will keep Arabic layout as default
       with possibility of switching to 'us' by 'alt+shift' key
       combination.
       Keyboard layout variants are also supported.
       
       NOTE: changing the keyboard layout using the desktop environment
       settings may overwrite this cheatcode. Also, it will not work in
       Wayland sessions.
       
       Example (to set Polish keyboard layout with 'qwertz' as a variant):
       kmap=pl:qwertz

load=module
load=module1;module2

   ... Load optional modules from /optional directory on the booting
       media that contain the strings specified. Additional modules can
       be listed, separated by semicolons, without spaces.
       
       Example:
       load=gimp;inkscape;firefox

login=user_name

   ... Lets you specify the name of the user (could be also 'root')
       which will be autologged into the desktop environment session.
       If username is not provided or doesn't exist, then booting
       stops on the login manager screen.

mopt

   ... This cheatcode will allow you to customize your filesystem
       mount options.  By default, the mount options for all
       filesystems in PorteuX are: "noatime,nodiratime,suid,dev,exec,async".
       Each option must be separated with a comma "," with no spaces
       between any characters.
       
       Example:
       mopt=realtime,sync,users,nosuid,noexec

noauto

   ... Do not mount any devices during startup.
       Every disk needs to be mounted manually in order to access it.

nobluetooth

   ... Do not enable bluetooth daemon at boot. If you want to manually
       enable it after boot, run as root: sh /etc/rc.d/rc.bluetooth start

nocd

   ... Do not discover any optical devices during startup.

nohd

   ... Do not discover any hard drives during startup.

nohotplug

   ... Disable specified hardware autodetection in the case of
       hangups. None of your hardware will be detected, and you'll
       have to use the "modprobe" command after logging in to
       text mode and load all needed drivers manually.

noload=module
noload=module1;module2

   ... Disable loading of any modules with a name containing the strings
       specified. This affects all the modules on the PorteuX booting
       media, including /base and /modules folders, so using noload=kde
       will disable loading of all modules with 'kde' in the name. It's
       useful with the copy2ram cheatcode, because any un-used module is
       not copied to RAM.  Multiple modules can be listed, but they must
       be separated by semicolons, with no spaces.
       
       Example:
       noload=lxde;devel

nologin

   ... Do not auto login after the desktop environment is loaded.

nomagic

   ... Do not bind "magic folders" during boot time. Useful when
       something went wrong with your PorteuX configuration and you
       want to boot into true 'Always Fresh' mode.

nonetwork

   ... This boot parameter will prevent PorteuX from automatically
       establishing a network connection on start-up.
       Note that this cheatcode makes some modifications to
       your system which must be manually restored, so it is
       recommended that you only use this cheatcode in "Always
       Fresh" mode. If you've ignored this advice and need to
       recover your network connection, please run the following:

       chmod +x /etc/rc.d/rc.inet1 /etc/rc.d/rc.networkmanager
       sed -i 's/Hidden=true//g' /etc/xdg/autostart/nm-applet.desktop

norootcopy

   ... Do not copy files from your rootcopy directory at boot-up.
       Like the 'nomagic' cheatcode, this is useful if something went
       wrong with your PorteuX configuration and you want to boot into
       true 'Always Fresh' mode.

noswap

   ... Prevents the automatic use of an existing swap partition.
       By default, PorteuX searches your attached drives for
       partitions that are formatted as swap, and will mount them
       for use within PorteuX. The 'noswap' cheatcode disables
       this behaviour.

ramsize=some_value%

   ... Will let you set a custom size for the tmpfs partition
       which is used as the root (/) of your live filesystem
       when changes are not saved on a real filesystem
       (i.e., Always Fresh mode). The default value is 85% of
       available RAM memory.
       
       Example:
       ramsize=50%

rammod=module
rammod=folder
rammod=module1;module2;folder1;folder2

   ... Specify module(s) or folder(s) containing modules which should
       be copied to RAM when using the 'copy2ram' cheatcode.  This
       allows you to have the speed benefit of 'copy2ram' for the
       modules you use the most, without occupying your RAM with those
       modules that you make use of less often.  Any modules that are
       not specified will be mounted in place on the block device, so
       your device will remain mounted while PorteuX is running.

       You can use a full or partial names for your search string,
       but keep in mind that all modules and folders that match your
       string will be loaded into RAM; if you have extra modules in a
       folder named 'lxde' and you use 'rammod=lxde', then the module
       003-lxde.xzm from /porteux/base will be loaded in addition to
       all modules in the 'lxde' folder.

       NOTE: 'rammod' cannot be used without 'copy2ram', and it also
       will not load modules from /porteux/optional or external
       locations unless you also specify these modules with the
       'load=' or 'extramod=' cheatcodes.

       Examples:
       rammod=001;002;004;firefox
       extramod=/mnt/sdb3/porteux/gimp rammod=001;002;gimp

rootcopy=/path/to_folder/with_files

   ... Copy files from specified directory directly to the live
       filesystem. This directory will be used instead of the
       traditional /porteux/rootcopy.
       
       Example: 'rootcopy=/mnt/sda5/porteux-files'
       
rootmount

   ... Instead of copying files from rootcopy, it mounts them.
       The advantages are faster boot and less RAM. It's only
       supported in POSIX filesystem and when copy2ram is off.

cfgfile=some_name.cfg

   ... This cheatcode specifies the *.cfg file which PorteuX will
       search for.  This is useful when you want to store several
       PorteuX editions on one disk/disc.
       
       Example:
       cfgfile=porteux-usb.cfg

storage=/path/folder
storage=/path/file.dat

   ... This cheatcode takes action only when used together with the
       'pxe' cheatcode. It tells the server to store persistent
       changes from the clients in a specified folder. Changes must
       be saved on a real and writeable filesystem (will not work with
       aufs).
       Separate folders for each client will be created with the name
       '/path/folder/client-xxxx' where xxxx is the last 4 characters
       of the clients' NIC MAC address.
       This cheatcode should be used on the server side.
       
       Example:
       storage=/mnt/sda3/pxe-clients

timezone=region/zone

   ... Tell PorteuX the correct timezone for your location.  By default,
       this assumes that your hardware clock is set to localtime.  To use
       a timezone with a hardware clock set to UTC time instead, also
       add the 'utc' cheatcode.
       A full listing of available timezones can be found in the file
       /usr/sbin/timeconfig.
       
       Examples:
       timezone=Europe/Warsaw
       timezone=Factory

utc

   ... Tell PorteuX that your hardware clock is set to UTC time and
       not to localtime.  Most computers that have Windows installed on
       them use localtime instead of UTC time, but many UNIX machines
       use UTC instead.  This cheatcode is normally used together with
       the 'timezone' cheatcode.
       
       Example:
       timezone=Europe/Warsaw utc

vga_detect

   ... Automatically detects Nvidia video cards and loads the
       proprietary driver at startup.  You must have a module
       containing the appropriate graphics driver stored in your
       /porteux/optional/ directory. The driver module is available in
       the PorteuX App Store. If you want to compile your own driver,
       please note that the module's name must contain nvidia-[number],
       where [number] is the number of the driver version.

volume=some_value%

   ... This parameter sets the system's master volume channel to
       the value specified (as a percentage). You will be able to raise
       or lower the volume after you boot up as normal.
       
       NOTE: the default value is 75%.
       
       Example:
       volume=10%

zram=some_value%

   ... enable the use of zram, which is a compressed block device
       inside your RAM that acts as a swap partition. Zram operates
       faster than using swap on a hard drive and creates more
       (virtual) memory than using RAM alone because the data inside
       is compressed. This will provide a performance boost on
       systems with low RAM, but it uses more processor cycles (to
       compress and decompress the data) than regular swap. The value
       specified is the percentage of your system total RAM.
       
       Example:
       zram=33%


SPECIAL NOTE FOR USING CHEATCODES WITH 'LABEL' AND 'UUID':
If you specify a LABEL or UUID with a cheatcode, remember that all
portions of these commands are case sensitive.  You should use a
unique label for each of your partitions if you wish to use device
labels with your cheatcodes. Use the 'blkid' command to view your
device's UUID and LABEL. Using UUID and LABEL can be quite handy
because they are unique to your device, and your data will be found
and properly mapped on different hardware configurations.
Every cheatcode which contains a /path can take advantage of 'UUID:'
and 'LABEL:' extensions.

Examples:
changes=UUID:STrING-0F-ChARACtERS/path/file.dat
extramod=LABEL:YourLabelName/path/to_folder/with_modules
from=UUID:STrING-0F-ChARACtERS/path/folder
rootcopy=LABEL:YourLabelName/path/to_folder/with_files


FINAL NOTE:
The cheatcodes listed above are those that are unique to PorteuX.
There are literally hundreds of other kernel boot parameters
that can be used.  For more information on these parameters visit:
https://docs.kernel.org/admin-guide/kernel-parameters.html
