--- meson.build
+++ meson.build
@@ -3,21 +3,28 @@ project(
   version: '47.0.1',
   license: 'GPL2+',
   default_options: 'buildtype=debugoptimized',
-  meson_version: '>= 0.60.0'
+  meson_version: '>= 0.53.0'
 )
 
+prefix = get_option('prefix')
 session_version = meson.project_version()
 session_api_name = '@0@-@1@'.format(meson.project_name(), session_version.split('.')[0])
 
 session_prefix = get_option('prefix')
 session_bindir = join_paths(session_prefix, get_option('bindir'))
 session_datadir = join_paths(session_prefix, get_option('datadir'))
+session_libdir = join_paths(session_prefix, get_option('libdir'))
 session_libexecdir = join_paths(session_prefix, get_option('libexecdir'))
 session_localedir = join_paths(session_prefix, get_option('localedir'))
+session_localstatedir = join_paths(session_prefix, get_option('localstatedir'))
+session_mandir = join_paths(session_prefix, get_option('mandir'))
+session_sbindir = join_paths(session_prefix, get_option('sbindir'))
 session_sysconfdir = join_paths(session_prefix, get_option('sysconfdir'))
 
 session_pkgdatadir = join_paths(session_datadir, meson.project_name())
 
+session_debug = get_option('buildtype').contains('debug')
+
 cc = meson.get_compiler('c')
 
 config_h = configuration_data()
@@ -39,7 +46,8 @@ endforeach
 # compiler flags
 common_flags = ['-DHAVE_CONFIG_H']
 
-if get_option('deprecation_flags')
+enable_deprecation_flags = get_option('deprecation_flags')
+if enable_deprecation_flags
   common_flags += [
     '-DBONOBO_DISABLE_DEPRECATED',
     '-DBONOBO_DISABLE_SINGLE_INCLUDES',
@@ -59,7 +67,7 @@ if get_option('deprecation_flags')
 endif
 
 compiler_flags = []
-if get_option('debug')
+if session_debug
   test_cflags = [
     '-Werror=format=2',
     '-Werror=implicit-function-declaration',
@@ -103,18 +111,69 @@ session_bin_deps = session_deps + [
 # Check for session selector GTK+ UI
 enable_session_selector = get_option('session_selector')
 
-session_bin_deps += dependency('gio-unix-2.0', version: glib_req_version)
-
-# Check for systemd
-systemd_userunitdir = get_option('systemduserunitdir')
-if systemd_userunitdir == ''
-  systemd_dep = dependency('systemd', version: '>= 242', required: true)
-  systemd_userunitdir = systemd_dep.get_variable(pkgconfig: 'systemduserunitdir',
-                                                 pkgconfig_define: ['prefix', session_prefix])
+# Check for session tracking backend
+session_tracking = 'null backend'
+
+enable_systemd = get_option('systemd')
+enable_systemd_session = get_option('systemd_session') != 'disable'
+use_systemd_session = get_option('systemd_session') == 'default'
+enable_systemd_journal = get_option('systemd_journal')
+enable_elogind = get_option('elogind')
+if enable_systemd or enable_elogind
+  session_bin_deps += dependency('gio-unix-2.0', version: glib_req_version)
+
+  # Check for systemd
+if enable_systemd
+    systemd_userunitdir = get_option('systemduserunitdir')
+    if systemd_userunitdir == ''
+      systemd_dep = dependency('systemd', version: '>= 242', required: true)
+      systemd_userunitdir = systemd_dep.get_pkgconfig_variable('systemduserunitdir',
+                                                               define_variable: ['prefix', prefix])
+    endif
+
+    libsystemd_dep = dependency('libsystemd', version: '>= 209', required: false)
+    session_bin_deps += libsystemd_dep
+
+    if not libsystemd_dep.found()
+      libsystemd_login_dep = dependency('libsystemd-login', version: '>= 183', required: false)
+      libsystemd_daemon_dep = dependency('libsystemd-daemon', required: false)
+      libsystemd_journal_dep = dependency('libsystemd-journal', required: false)
+      assert(libsystemd_login_dep.found() and libsystemd_daemon_dep.found() and libsystemd_journal_dep.found(),
+             'Systemd support explicitly required, but systemd not found')
+
+      session_bin_deps += [
+        libsystemd_login_dep,
+        libsystemd_daemon_dep,
+        libsystemd_journal_dep
+      ]
+    endif
+
+    session_tracking = 'systemd'
+  endif
+
+    if enable_systemd
+      session_tracking += ' (with fallback to ConsoleKit)'
+    else
+      session_tracking = 'ConsoleKit'
+    endif
+
+  # Check for elogind
+    if enable_elogind
+      elogind_dep = dependency('libelogind', version: '>= 209')
+      session_bin_deps += elogind_dep
+
+      session_tracking = 'elogind'
+    endif
+
+  endif
+if enable_systemd_session
+  assert(enable_systemd or enable_elogind, 'Systemd or elogind support must be enabled when using systemd session management')
 endif
-
-libsystemd_dep = dependency('libsystemd', version: '>= 209', required: true)
-session_bin_deps += libsystemd_dep
+config_h.set('HAVE_SYSTEMD', enable_systemd)
+config_h.set('ENABLE_SYSTEMD_SESSION', enable_systemd_session)
+config_h.set('ENABLE_SYSTEMD_JOURNAL', enable_systemd_journal)
+config_h.set('HAVE_ELOGIND', enable_elogind)
+config_h.set10('USE_SYSTEMD_SESSION', use_systemd_session)
 
 configure_file(
   output: 'config.h',
@@ -125,14 +184,20 @@ gnome = import('gnome')
 i18n = import('i18n')
 pkg = import('pkgconfig')
 
-po_dir = join_paths(meson.project_source_root(), 'po')
+po_dir = join_paths(meson.source_root(), 'po')
 
 top_inc = include_directories('.')
 
 subdir('gnome-session')
 subdir('tools')
 subdir('data')
-subdir('doc')
+
+enable_docbook = get_option('docbook')
+enable_man = get_option('man')
+if enable_docbook or enable_man
+  subdir('doc')
+endif
+
 subdir('po')
 
 meson.add_install_script(
@@ -140,29 +205,22 @@ meson.add_install_script(
   session_datadir
 )
 
-gnome.post_install(
-  glib_compile_schemas: true,
-)
-
-summary_options = {
- 'Debug mode': get_option('debug'),
- 'Use *_DISABLE_DEPRECATED': get_option('deprecation_flags'),
- 'Build Docbook': get_option('docbook'),
- 'Build manpages': get_option('man'),
- 'Systemd Units Directory': systemd_userunitdir,
- 'Session Selector Enabled': enable_session_selector,
-}
-
-summary_dirs = {
-  'prefix': get_option('prefix'),
-  'datadir': session_datadir,
-  'bindir': session_bindir,
-  'libexecdir': session_libexecdir,
-  'localedir': session_localedir,
-  'mandir': get_option('mandir'),
-  'sysconfdir': session_sysconfdir,
-  'pkgdatadir': session_pkgdatadir,
-}
-
-summary(summary_dirs, section: 'Directories')
-summary(summary_options, section: 'Build Options')
+output = '\n                gnome-session ' + session_version + '\n'
+output += '                ====================\n\n'
+output += '        prefix:                   ' + session_prefix + '\n'
+output += '        exec_prefix:              ' + session_libexecdir + '\n'
+output += '        libdir:                   ' + session_libdir + '\n'
+output += '        bindir:                   ' + session_bindir + '\n'
+output += '        sbindir:                  ' + session_sbindir + '\n'
+output += '        sysconfdir:               ' + session_sysconfdir + '\n'
+output += '        localstatedir:            ' + session_localstatedir + '\n'
+output += '        datadir:                  ' + session_datadir + '\n'
+output += '        source code location:     ' + meson.source_root() + '\n'
+output += '        compiler:                 ' + cc.get_id() + '\n'
+output += '        cflags:                   ' + ' '.join(compiler_flags) + '\n'
+output += '        Debug mode:               ' + session_debug.to_string() + '\n'
+output += '        Use *_DISABLE_DEPRECATED: ' + enable_deprecation_flags.to_string() + '\n\n'
+output += '        Session tracking:         ' + session_tracking + ' \n'
+output += '        Build Docbook:            ' + enable_docbook.to_string() + '\n'
+output += '        Build manpages:           ' + enable_man.to_string()
+message(output)
